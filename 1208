import seaborn as sns
import matplotlib.pyplot as plt

import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, roc_auc_score

# machine learning
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC, LinearSVC
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.linear_model import Perceptron
from sklearn.linear_model import SGDClassifier
from sklearn.tree import DecisionTreeClassifier

import pandas as pd
import numpy as np

import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns
%pip install --upgrade seaborn
%matplotlib inline

mpl.rcParams['axes.unicode_minus'] = False

import warnings
warnings.filterwarnings('ignore')

festival = pd.read_csv("C:/Users/YEJOO CHO/Desktop/대학원/201902학기/데이터과학/과제/festival_v7.csv",parse_dates=['startdate'])

festival.info()

festival["month"] = festival["startdate"].dt.month

festival.head()

festival.isnull().sum()

festival.describe()

festival=festival.fillna(0)

#데이터가 다들어가져있는지 이것으로 확인가능하다
import missingno as msno
msno.matrix(festival, figsize=(12,5))

figure, ((ax1)) = plt.subplots(nrows=1, ncols=1)
figure.set_size_inches(18,8)
month_g=sns.barplot(data=festival, x="month", y="success", ax=ax1)
month_g

corrMatt = festival[["province","month","percentage","money","trust","type","people","success"]]
corrMatt = corrMatt.corr()
print(corrMatt)

mask = np.zeros_like(corrMatt, dtype=np.bool)
mask[np.triu_indices_from(mask)] = True
fig, ax = plt.subplots(figsize=(11, 10))
cmap = sns.diverging_palette(220, 10, as_cmap=True)
sns.heatmap(corrMatt, mask=mask, cmap=cmap, center=0,
            linewidths=.5, cbar_kws={"shrink": .6});
            
categorical_festival_names = ["month","trust","type","province"]
for var in categorical_festival_names:
    festival[var] = festival[var].astype("category")
    
festival_names = festival[["month","percentage", "type", "trust", "money", "years", "people"]]
festival_label = festival.success

x_train, x_test, y_train, y_test = train_test_split(festival_names, festival_label, test_size=0.3, random_state=0)

#Logitic Regression
lr = LogisticRegression()
lr.fit(x_train, y_train)
Y_preds = lr.predict(x_test)
acc_lr = round(lr.score(x_train, y_train)*100,2)
acc_lr

#Support Vector Machines

svc = SVC(gamma='scale')
svc.fit(x_train, y_train)
Y_pred = svc.predict(x_test)
acc_svc = round(svc.score(x_train, y_train) * 100, 2)
acc_svc

# KNN
knn = KNeighborsClassifier(n_neighbors = 3)
knn.fit(x_train, y_train)
Y_pred = knn.predict(x_test)
acc_knn = round(knn.score(x_train, y_train) * 100, 2)
acc_knn

# Linear SVC

linear_svc = LinearSVC()
linear_svc.fit(x_train,y_train)
Y_pred = linear_svc.predict(x_test)
acc_linear_svc = round(linear_svc.score(x_train, y_train) * 100, 2)
acc_linear_svc

models = pd.DataFrame({
    'Model': ['Support Vector Machines', 'KNN','Gaussian Naive Bayes','Linear SVC'],
    'Score': [acc_svc, acc_knn, acc_gaussian, acc_linear_svc]})
models.sort_values(by='Score', ascending=False)

models = pd.DataFrame({
    'Model': ['Logistic Regression','Support Vector Machines', 'KNN','Linear SVC'],
    'Score': [acc_lr,acc_svc, acc_knn,acc_linear_svc]})
models.sort_values(by='Score', ascending=False)
